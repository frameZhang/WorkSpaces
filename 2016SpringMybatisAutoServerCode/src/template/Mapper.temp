<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="${packagePath?replace("entity", "dao")}.${className}Dao">
 
    <insert id="save" parameterType="${packagePath}.${className}">  
     <![CDATA[   
         insert into  ${className?uncap_first} (<#list properties as pro> ${pro.name}<#if pro_has_next>,</#if></#list>)
         values(<#list properties as pro>${'#'}{${pro.name}}<#if pro_has_next>, </#if></#list>)	
     ]]>   
    </insert>
  
    
    <!--  mysql -->
    <insert id="saveEntities"> 
	 	 <![CDATA[  
	    	insert into ${className?uncap_first} (<#list properties as pro> ${pro.name}<#if pro_has_next>,</#if></#list>) VALUES 
	    ]]>  
	    <foreach collection="entities" item="item" index="index" separator=",">   
	         (<#list properties as pro> ${'#'}{item.${pro.name}}<#if pro_has_next>,</#if></#list>)
	    </foreach> 
	</insert> 
	
	
	<update id="updateByID" >
		<![CDATA[  
			update ${className?uncap_first} set 	
      		<#list propNotID as pro>
      		${pro.name} = ${'#'}{entity.${pro.name}}<#if pro_has_next>,</#if>
      		</#list>	
      	]]>
      	<where>
      		${entityID} = ${'#'}{id}
      	</where>  		
	</update>
		
		
	<update id="updateByCondition">
		<![CDATA[  
			update ${className?uncap_first} set 	
      		<#list propNotID as pro>
      		${pro.name} = ${'#'}{entity.${pro.name}}<#if pro_has_next>,</#if>
      		</#list>	
      	]]>
      	<where>
      		<if test="condition != null">
      			${'$'}{condition}
      		</if>
      	</where>  		
	</update>	
	
	<update id="updatePropByID">
		<![CDATA[  
			update  ${className?uncap_first} set
		]]>
		<foreach collection="prop" item="item" index="index" separator=",">
          	${'$'}{item.key} = ${'#'}{item.value}
        </foreach>
        <where>
        	${entityID} = ${'#'}{id}
        </where>
	</update>	
	
	<update id="updatePropByCondition">
		<![CDATA[  
			update  ${className?uncap_first} set
		]]>
		<foreach collection="prop" item="item" index="index" separator=",">
          	${'$'}{item.key} = ${'#'}{item.value}
        </foreach>
        <where>
        	<if test="condition != null">
        		${'$'}{condition}
        	</if>
        </where>
	</update>	
	
   <delete id="deleteByID"  parameterType="string">
		<![CDATA[   
			delete from ${className?uncap_first}   
		]]>
		<where>
			${entityID} = ${'#'}{ID}
		</where>
	</delete>	
	
	<delete id="deleteByCondition"  parameterType="string">
		<![CDATA[   
			delete from ${className?uncap_first}  
		]]>
		<where>
			<if test="condition != null">
				${'$'}{condition}
			</if>	
		</where>	
	</delete>	
	
	<delete id="deleteEntities"  parameterType="string">
		<![CDATA[   
			delete from ${className?uncap_first}    
		]]>
		<where>
			 ${entityID} in
			 <foreach collection="ids" item="item" index="index" separator="," open="(" close=")">
          		${'#'}{item}
        	</foreach>
		</where>	
	</delete>
	
	
	<select id="getByID" resultType="${packagePath}.${className}">
		<![CDATA[   
			select * from ${className?uncap_first} 
		]]>
		<where>
			${entityID} = ${'#'}{ID}
		</where>
	</select>
	
	<select id="getByCondition" resultType="${packagePath}.${className}">
		<![CDATA[   
			select * from ${className?uncap_first} 
		]]>
		<where>
			<if test="condition != null">
		 		${'$'}{condition}
		 	</if>
		</where>
	</select>
	
	<select id="findByID" resultType="map">
		select 
		<foreach collection="properties" item="item" index="index" separator=",">
          	${'$'}{item}
        </foreach>
        from ${className?uncap_first} 
        <where>
        	${entityID} = ${'#'}{id}
        </where>
	</select>	
	
	
	<select id="findByCondition" resultType="map">
		select 
		<foreach collection="properties" item="item" index="index" separator=",">
          	${'$'}{item}
        </foreach>
        from ${className?uncap_first} 
        <where>
        	<if test="condition != null">
        		${'$'}{condition}
        	</if>
        </where>
	</select>		
	
		
	<select id="getCountByCondition" resultType="int">
		select count(distinct ${entityID}) from ${className?uncap_first}
		<where>
        	<if test="condition != null">
        		${'$'}{condition}
        	</if>	
        </where>
	</select>	
</mapper>